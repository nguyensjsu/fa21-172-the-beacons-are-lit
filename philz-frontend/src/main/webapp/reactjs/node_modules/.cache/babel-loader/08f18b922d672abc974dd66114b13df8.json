{"ast":null,"code":"import * as AT from \"./authTypes\";\nimport axios from \"axios\";\nconst AUTH_URL = \"http://localhost:8080/api/user/authenticate\";\nexport const authenticateUser = (email, password) => async dispatch => {\n  dispatch(loginRequest());\n\n  try {\n    const response = await axios.post(AUTH_URL, {\n      email: email,\n      password: password\n    });\n    localStorage.setItem(\"jwtToken\", response.data.token);\n    dispatch(success({\n      username: response.data.name,\n      userId: response.data.userId,\n      isLoggedIn: true\n    }));\n    return Promise.resolve(response.data);\n  } catch (error) {\n    dispatch(failure());\n    return Promise.reject(error);\n  }\n};\nexport const logoutUser = () => {\n  return dispatch => {\n    dispatch(logoutRequest());\n    localStorage.removeItem(\"jwtToken\");\n    dispatch(success({\n      username: \"\",\n      userId: response.data.userId,\n      isLoggedIn: false\n    }));\n  };\n};\n\nconst loginRequest = () => {\n  return {\n    type: AT.LOGIN_REQUEST\n  };\n};\n\nconst logoutRequest = () => {\n  return {\n    type: AT.LOGOUT_REQUEST\n  };\n};\n\nconst success = isLoggedIn => {\n  return {\n    type: AT.SUCCESS,\n    payload: isLoggedIn\n  };\n};\n\nconst failure = () => {\n  return {\n    type: AT.FAILURE,\n    payload: false\n  };\n};","map":{"version":3,"sources":["/Users/annluu/fa21-172-the-beacons-are-lit/philz-frontend/src/main/webapp/reactjs/src/services/user/auth/authActions.js"],"names":["AT","axios","AUTH_URL","authenticateUser","email","password","dispatch","loginRequest","response","post","localStorage","setItem","data","token","success","username","name","userId","isLoggedIn","Promise","resolve","error","failure","reject","logoutUser","logoutRequest","removeItem","type","LOGIN_REQUEST","LOGOUT_REQUEST","SUCCESS","payload","FAILURE"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,aAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,QAAQ,GAAG,6CAAjB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAOC,QAAP,IAAoB;AACvEA,EAAAA,QAAQ,CAACC,YAAY,EAAb,CAAR;;AACA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAN,CAAWP,QAAX,EAAqB;AAC1CE,MAAAA,KAAK,EAAEA,KADmC;AAE1CC,MAAAA,QAAQ,EAAEA;AAFgC,KAArB,CAAvB;AAIAK,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,QAAQ,CAACI,IAAT,CAAcC,KAA/C;AACAP,IAAAA,QAAQ,CAACQ,OAAO,CAAC;AAAEC,MAAAA,QAAQ,EAAEP,QAAQ,CAACI,IAAT,CAAcI,IAA1B;AAAgCC,MAAAA,MAAM,EAAET,QAAQ,CAACI,IAAT,CAAcK,MAAtD;AAA8DC,MAAAA,UAAU,EAAE;AAA1E,KAAD,CAAR,CAAR;AACA,WAAOC,OAAO,CAACC,OAAR,CAAgBZ,QAAQ,CAACI,IAAzB,CAAP;AACD,GARD,CAQE,OAAOS,KAAP,EAAc;AACdf,IAAAA,QAAQ,CAACgB,OAAO,EAAR,CAAR;AACA,WAAOH,OAAO,CAACI,MAAR,CAAeF,KAAf,CAAP;AACD;AACF,CAdM;AAgBP,OAAO,MAAMG,UAAU,GAAG,MAAM;AAC9B,SAAQlB,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACmB,aAAa,EAAd,CAAR;AACAf,IAAAA,YAAY,CAACgB,UAAb,CAAwB,UAAxB;AACApB,IAAAA,QAAQ,CAACQ,OAAO,CAAC;AAAEC,MAAAA,QAAQ,EAAE,EAAZ;AAAgBE,MAAAA,MAAM,EAAET,QAAQ,CAACI,IAAT,CAAcK,MAAtC;AAA8CC,MAAAA,UAAU,EAAE;AAA1D,KAAD,CAAR,CAAR;AACD,GAJD;AAKD,CANM;;AAQP,MAAMX,YAAY,GAAG,MAAM;AACzB,SAAO;AACLoB,IAAAA,IAAI,EAAE3B,EAAE,CAAC4B;AADJ,GAAP;AAGD,CAJD;;AAMA,MAAMH,aAAa,GAAG,MAAM;AAC1B,SAAO;AACLE,IAAAA,IAAI,EAAE3B,EAAE,CAAC6B;AADJ,GAAP;AAGD,CAJD;;AAMA,MAAMf,OAAO,GAAII,UAAD,IAAgB;AAC9B,SAAO;AACLS,IAAAA,IAAI,EAAE3B,EAAE,CAAC8B,OADJ;AAELC,IAAAA,OAAO,EAAEb;AAFJ,GAAP;AAID,CALD;;AAOA,MAAMI,OAAO,GAAG,MAAM;AACpB,SAAO;AACLK,IAAAA,IAAI,EAAE3B,EAAE,CAACgC,OADJ;AAELD,IAAAA,OAAO,EAAE;AAFJ,GAAP;AAID,CALD","sourcesContent":["import * as AT from \"./authTypes\";\nimport axios from \"axios\";\n\nconst AUTH_URL = \"http://localhost:8080/api/user/authenticate\";\n\nexport const authenticateUser = (email, password) => async (dispatch) => {\n  dispatch(loginRequest());\n  try {\n    const response = await axios.post(AUTH_URL, {\n      email: email,\n      password: password,\n    });\n    localStorage.setItem(\"jwtToken\", response.data.token);\n    dispatch(success({ username: response.data.name, userId: response.data.userId, isLoggedIn: true }));\n    return Promise.resolve(response.data);\n  } catch (error) {\n    dispatch(failure());\n    return Promise.reject(error);\n  }\n};\n\nexport const logoutUser = () => {\n  return (dispatch) => {\n    dispatch(logoutRequest());\n    localStorage.removeItem(\"jwtToken\");\n    dispatch(success({ username: \"\", userId: response.data.userId, isLoggedIn: false }));\n  };\n};\n\nconst loginRequest = () => {\n  return {\n    type: AT.LOGIN_REQUEST,\n  };\n};\n\nconst logoutRequest = () => {\n  return {\n    type: AT.LOGOUT_REQUEST,\n  };\n};\n\nconst success = (isLoggedIn) => {\n  return {\n    type: AT.SUCCESS,\n    payload: isLoggedIn,\n  };\n};\n\nconst failure = () => {\n  return {\n    type: AT.FAILURE,\n    payload: false,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}